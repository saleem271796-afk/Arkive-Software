/******************************************************************
 *  TaxCalculator.tsx  â€“  FBR-compliant 2025-26 (PKR symbols)
 *  All new slabs verified from FBR circulars / budget docs
 ******************************************************************/
import React, { useState, useMemo } from 'react';
import {
  ArrowLeft,
  Banknote,
  BarChart3,
  Briefcase,
  Calculator,
  Car,
  Coins,
  Home,
  Info,
  Lightbulb,
  PieChart as PieIcon,
  TrendingUp,
  Users,
  Download,
  Share,
  Copy,
  CheckCircle,
  Sparkles,
  Target,
  Award
} from 'lucide-react';
import {
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
  Tooltip,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
} from 'recharts';
import { taxCalculator as core, TaxCalculation } from '../services/taxCalculator';
import { format } from 'date-fns';

/* Get categories from core service */
const allCategories = core.getTaxCategories();

/* -----------------------------------------------------------
   Component starts here
----------------------------------------------------------- */
export const TaxCalculator: React.FC = () => {
  /* ---------- Screen & inputs ---------- */
  const [step, setStep] = useState<'category' | 'calc'>('category');
  const [categoryId, setCategoryId] = useState('');
  const [period, setPeriod] = useState<'monthly' | 'annual'>('monthly');
  const [rawInput, setRawInput] = useState('');
  const [includeZakat, setIncludeZakat] = useState(false);
  const [copied, setCopied] = useState(false);

  const numericInput = useMemo(() => Number(rawInput.replace(/[^\d]/g, '')) || 0, [rawInput]);


  /* ---------- Calculation ---------- */
  const calc: TaxCalculation | null = useMemo(() => {
    if (!categoryId || numericInput <= 0) return null;

    const isMonthlyCapable = ['salary', 'pension', 'property'].includes(categoryId);
    const annual = isMonthlyCapable ? (period === 'monthly' ? numericInput * 12 : numericInput) : numericInput;

    // use core taxCalculator for built-ins, our own for extras
    const catObj = allCategories.find((c) => c.id === categoryId)!;
    return core.calculateTax(categoryId, numericInput, period === 'monthly', includeZakat);
  }, [categoryId, numericInput, period, includeZakat]);

  // Derive showResults from calc and numericInput
  const showResults = calc && numericInput > 0;
  /* ---------- Helpers ---------- */
  const fmt = (n: number) => `PKR ${n.toLocaleString('en-PK')}`;
  const iconMap: Record<string, React.ElementType> = {
    salary: Users,
    pension: Users,
    business: Briefcase,
    property: Home,
    property236C: Home,
    property236K: Home,
    bankProfit: Banknote,
    dividend: Coins,
    capitalGainsSecurities: TrendingUp,
    builderDeveloper: Home,
    transport: Car,
  };

  const handleCopyResults = async () => {
    if (!calc) return;
    
    const text = `Tax Calculation Results:
Gross Income: ${fmt(calc.grossIncome)}
Total Tax: ${fmt(calc.totalTax)}
Net Income: ${fmt(calc.netIncome)}
Effective Rate: ${calc.effectiveRate.toFixed(1)}%

Generated by Arkive Tax Calculator`;
    
    try {
      await navigator.clipboard.writeText(text);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error('Failed to copy:', error);
    }
  };

  const handleExportPDF = () => {
    if (!calc) return;
    
    const catObj = allCategories.find((c) => c.id === categoryId)!;
    
    // Create a simple text export for now
    const data = `Tax Calculation Report
Generated: ${format(new Date(), 'MMMM dd, yyyy')}

Category: ${catObj.name}
Income Period: ${period === 'monthly' ? 'Monthly' : 'Annual'}

CALCULATION RESULTS:
Gross Income: ${fmt(calc.grossIncome)}
Taxable Income: ${fmt(calc.taxableIncome)}
Total Tax: ${fmt(calc.totalTax)}
Net Income: ${fmt(calc.netIncome)}
Effective Tax Rate: ${calc.effectiveRate.toFixed(1)}%

${includeZakat ? 'Zakat (2.5%) included in calculation' : 'Zakat not included'}

Disclaimer: This is an estimate based on Finance Act 2025-26. 
Please consult a qualified tax advisor for precise calculations.`;

    const blob = new Blob([data], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `tax-calculation-${format(new Date(), 'yyyy-MM-dd')}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };
  /* ---------- Category picker ---------- */
  if (step === 'category') {
    return (
      <div className="space-y-8 animate-fadeIn max-w-7xl mx-auto">
        <div className="text-center mb-12">
          <div className="mx-auto w-24 h-24 bg-gradient-to-br from-blue-600 to-indigo-600 rounded-3xl flex items-center justify-center mb-8 shadow-2xl animate-gentle-bounce">
            <Calculator className="w-12 h-12 text-white" />
          </div>
          <h1 className="text-5xl font-bold text-gray-900 dark:text-white mb-4 bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent">
            Pakistan Tax Calculator 2025-26
          </h1>
          <p className="text-xl text-gray-600 dark:text-gray-400 max-w-3xl mx-auto leading-relaxed">
            Select your income type to calculate tax according to Finance Act 2025-26
          </p>
          <div className="mt-6 flex items-center justify-center gap-6">
            <div className="inline-flex items-center px-6 py-3 bg-green-50 dark:bg-green-900/20 rounded-full text-sm text-green-700 dark:text-green-300 border border-green-200 dark:border-green-800">
              <CheckCircle className="w-5 h-5 mr-2" />
              FBR Compliant
            </div>
            <div className="inline-flex items-center px-6 py-3 bg-blue-50 dark:bg-blue-900/20 rounded-full text-sm text-blue-700 dark:text-blue-300 border border-blue-200 dark:border-blue-800">
              <Sparkles className="w-5 h-5 mr-2" />
              Updated for 2025-26
            </div>
            <div className="inline-flex items-center px-6 py-3 bg-purple-50 dark:bg-purple-900/20 rounded-full text-sm text-purple-700 dark:text-purple-300 border border-purple-200 dark:border-purple-800">
              <Award className="w-5 h-5 mr-2" />
              Professional Grade
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {allCategories.map((c) => {
            const Icon = iconMap[c.id] || Calculator;
            return (
              <button
                key={c.id}
                onClick={() => {
                  setCategoryId(c.id);
                  setStep('calc');
                }}
                className="bg-gradient-to-br from-white to-gray-50 dark:from-gray-800 dark:to-gray-900 hover:from-blue-50 hover:to-indigo-50 dark:hover:from-blue-900/20 dark:hover:to-indigo-900/20 p-8 rounded-2xl shadow-lg hover:shadow-2xl transform hover:scale-105 transition-all duration-300 text-left group border-2 border-gray-200 dark:border-gray-700 hover:border-blue-300 dark:hover:border-blue-600"
              >
                <div className="flex items-center justify-between mb-6">
                  <div className="w-16 h-16 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-2xl flex items-center justify-center group-hover:scale-110 transition-transform shadow-lg">
                    <Icon className="w-10 h-10 text-white" />
                  </div>
                  <div className="w-4 h-4 bg-gradient-to-r from-blue-400 to-indigo-500 rounded-full group-hover:scale-125 transition-transform"></div>
                </div>
                <h3 className="text-xl font-bold mb-3 text-gray-900 dark:text-white group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors">{c.name}</h3>
                <p className="text-sm text-gray-600 dark:text-gray-400 leading-relaxed group-hover:text-gray-700 dark:group-hover:text-gray-300 transition-colors">{c.description}</p>
                <div className="mt-6 flex items-center text-sm text-blue-600 dark:text-blue-400 group-hover:text-blue-700 dark:group-hover:text-blue-300 transition-colors font-medium">
                  <Target className="w-4 h-4 mr-2" />
                  Calculate Tax
                </div>
              </button>
            );
          })}
        </div>
      </div>
    );
  }

  /* ---------- Calculation screen ---------- */
  const catObj = allCategories.find((c) => c.id === categoryId)!;
  const isMonthlyCapable = ['salary', 'pension', 'property'].includes(categoryId);

  return (
    <div className="space-y-8 animate-fadeIn max-w-7xl mx-auto">
      <button
        onClick={() => {
          setStep('category');
          setRawInput('');
        }}
        className="flex items-center gap-2 px-6 py-3 text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white transition-all duration-300 rounded-xl hover:bg-gray-100 dark:hover:bg-gray-800 border border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600"
      >
        <ArrowLeft size={16} /> Back
      </button>

      <div className="text-center">
        <div className="mx-auto w-20 h-20 bg-gradient-to-br from-blue-600 to-indigo-600 rounded-3xl flex items-center justify-center mb-6 shadow-2xl animate-gentle-bounce">
          {React.createElement(iconMap[categoryId] || Calculator, { className: "w-10 h-10 text-white" })}
        </div>
        <h1 className="text-4xl font-bold text-gray-900 dark:text-white mb-3">{catObj.name}</h1>
        <p className="text-xl text-gray-600 dark:text-gray-400 max-w-2xl mx-auto">{catObj.description}</p>
      </div>

      {/* === INPUT CARD === */}
      <div className="bg-white dark:bg-gray-800 rounded-3xl p-10 space-y-8 shadow-2xl border-2 border-gray-100 dark:border-gray-700 hover:border-blue-200 dark:hover:border-blue-600 transition-all duration-300">
        <h2 className="text-2xl font-semibold text-gray-900 dark:text-white mb-6 flex items-center gap-2">
          <Calculator className="w-6 h-6 text-blue-600" />
          Income Details
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8 items-end">
          {isMonthlyCapable && (
            <div>
              <label className="block text-base font-semibold mb-4 text-gray-700 dark:text-gray-300">Income Period</label>
              <select
                value={period}
                onChange={(e) => setPeriod(e.target.value as any)}
                className="w-full px-5 py-4 border-2 border-gray-300 dark:border-gray-600 rounded-xl bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300 font-medium text-lg shadow-sm"
              >
                <option value="monthly">Monthly</option>
                <option value="annual">Annual</option>
              </select>
            </div>
          )}

          <div className={isMonthlyCapable ? '' : 'col-span-2'}>
            <label className="block text-base font-semibold mb-4 text-gray-700 dark:text-gray-300">
              {isMonthlyCapable ? `${period === 'monthly' ? 'Monthly' : 'Annual'}` : ''}{' '}
              Income Amount
            </label>
            <div className="relative">
              <span className="absolute left-5 top-1/2 -translate-y-1/2 text-gray-500 font-bold text-xl">â‚¨</span>
              <input
                type="text"
                value={rawInput}
                onChange={(e) => {
                  const value = e.target.value.replace(/[^\d]/g, '');
                  setRawInput(value ? parseInt(value).toLocaleString() : '');
                }}
                placeholder="e.g. 1,50,000"
                className="w-full pl-14 pr-5 py-5 border-2 border-gray-300 dark:border-gray-600 rounded-xl bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300 text-2xl font-bold shadow-sm"
              />
            </div>
            <p className="text-sm text-gray-500 dark:text-gray-400 mt-3 font-medium">
              Enter amount in Pakistani Rupees (PKR)
            </p>
          </div>

          {catObj.hasZakat && (
            <div className="flex items-center space-x-4 bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 rounded-xl p-5 border border-green-200 dark:border-green-800">
              <input
                id="zakat"
                type="checkbox"
                checked={includeZakat}
                onChange={(e) => setIncludeZakat(e.target.checked)}
                className="h-6 w-6 text-green-600 rounded-lg focus:ring-2 focus:ring-green-500"
              />
              <label htmlFor="zakat" className="text-base font-semibold text-green-700 dark:text-green-300">
                Include Zakat (2.5%)
              </label>
            </div>
          )}
        </div>
      </div>

      {/* === RESULT CARDS === */}
      {calc && showResults && (
        <>
          {/* Action Buttons */}
          <div className="flex justify-center gap-6 mb-8">
            <button
              onClick={handleCopyResults}
              className="flex items-center gap-3 px-8 py-4 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-xl hover:from-blue-700 hover:to-blue-800 transition-all duration-300 shadow-xl hover:shadow-2xl transform hover:scale-105 font-semibold"
            >
              {copied ? <CheckCircle className="w-5 h-5" /> : <Copy className="w-5 h-5" />}
              {copied ? 'Copied!' : 'Copy Results'}
            </button>
            <button
              onClick={handleExportPDF}
              className="flex items-center gap-3 px-8 py-4 bg-gradient-to-r from-green-600 to-green-700 text-white rounded-xl hover:from-green-700 hover:to-green-800 transition-all duration-300 shadow-xl hover:shadow-2xl transform hover:scale-105 font-semibold"
            >
              <Download className="w-5 h-5" />
              Export Report
            </button>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
            {[
              { 
                label: 'Gross Income',  
                value: fmt(calc.grossIncome),
                color: 'bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900/30 dark:to-blue-800/30 text-blue-700 dark:text-blue-300 border-2 border-blue-200 dark:border-blue-700',
                icon: Coins 
              },
              { 
                label: 'Total Tax', 
                value: fmt(calc.totalTax), 
                color: 'bg-gradient-to-br from-red-50 to-red-100 dark:from-red-900/30 dark:to-red-800/30 text-red-700 dark:text-red-300 border-2 border-red-200 dark:border-red-700',
                icon: Calculator 
              },
              { 
                label: 'Net Income', 
                value: fmt(calc.netIncome), 
                color: 'bg-gradient-to-br from-green-50 to-green-100 dark:from-green-900/30 dark:to-green-800/30 text-green-700 dark:text-green-300 border-2 border-green-200 dark:border-green-700',
                icon: TrendingUp 
              },
              { 
                label: 'Tax Rate', 
                value: `${calc.effectiveRate.toFixed(1)}%`,
                icon: Calculator, 
                color: 'bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-900/30 dark:to-purple-800/30 text-purple-700 dark:text-purple-300 border-2 border-purple-200 dark:border-purple-700', 
              },
            ].map((item, i) => (
              <div key={i} className={`${item.color} p-8 rounded-2xl shadow-xl hover:shadow-2xl hover-lift transition-all duration-300 group`}>
                <div className="flex items-center justify-between mb-2">
                  <p className="text-sm font-bold opacity-90 group-hover:opacity-100 transition-opacity">{item.label}</p>
                  <item.icon className="w-7 h-7 opacity-70 group-hover:opacity-90 group-hover:scale-110 transition-all" />
                </div>
                <p className="text-4xl font-bold group-hover:scale-105 transition-transform">{item.value}</p>
              </div>
            ))}
          </div>

          {/* Monthly Take-home for salary */}
          {isMonthlyCapable && (
            <div className="bg-gradient-to-r from-emerald-500 via-green-500 to-green-600 text-white rounded-3xl p-10 shadow-2xl border-2 border-green-400/30 hover:shadow-3xl transition-all duration-300">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-3xl font-bold">Monthly Take-home</h3>
                <div className="bg-white/20 p-3 rounded-2xl">
                  <TrendingUp className="w-10 h-10 text-green-100" />
                </div>
              </div>
              <p className="text-5xl font-bold mb-3">
                {fmt(Math.round(calc.netIncome / 12))}
              </p>
              <p className="text-green-100 text-lg font-medium">
                After tax and {includeZakat ? 'zakat' : 'without zakat'}
              </p>
            </div>
          )}

          {/* pie + bar charts */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div className="bg-white dark:bg-gray-800 p-8 rounded-3xl shadow-xl border-2 border-gray-100 dark:border-gray-700 hover:border-blue-200 dark:hover:border-blue-600 transition-all duration-300">
              <h3 className="text-xl font-semibold mb-6 text-gray-900 dark:text-white flex items-center gap-2">
                <PieIcon className="w-5 h-5 text-blue-600" />
                Income Distribution
              </h3>
              <ResponsiveContainer width="100%" height={280}>
                <PieChart>
                  <Pie
                    data={[
                      { name: 'Net', value: calc.netIncome },
                      { name: 'Tax', value: calc.totalTax },
                    ]}
                    dataKey="value"
                    label={({ name, percent }) => `${name}\n${Math.round(percent * 100)}%`}
                    outerRadius={100}
                    innerRadius={40}
                    paddingAngle={5}
                  >
                    <Cell fill="#10B981" />
                    <Cell fill="#EF4444" />
                  </Pie>
                  <Tooltip 
                    formatter={(v: number) => [fmt(v), '']}
                    contentStyle={{ 
                      backgroundColor: '#ffffff',
                      border: '2px solid #e5e7eb',
                      borderRadius: '12px',
                      boxShadow: '0 10px 25px -5px rgba(0, 0, 0, 0.1)',
                      fontSize: '14px',
                      fontWeight: 600
                    }}
                  />
                </PieChart>
              </ResponsiveContainer>
            </div>

            <div className="bg-white dark:bg-gray-800 p-8 rounded-3xl shadow-xl border-2 border-gray-100 dark:border-gray-700 hover:border-purple-200 dark:hover:border-purple-600 transition-all duration-300">
              <h3 className="text-xl font-semibold mb-6 text-gray-900 dark:text-white flex items-center gap-2">
                <BarChart3 className="w-5 h-5 text-purple-600" />
                Tax Brackets
              </h3>
              <ResponsiveContainer width="100%" height={280}>
                <BarChart
                  data={catObj.taxBrackets.map((b) => ({
                    range: `${(b.min / 1000)}K - ${b.max ? (b.max / 1000) + 'K' : 'âˆž'}`,
                    rate: Math.round(b.rate * 100),
                  }))}
                >
                  <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" className="opacity-50" />
                  <XAxis 
                    dataKey="range" 
                    tick={{ fontSize: 11, fill: '#6b7280', fontWeight: 500 }} 
                    angle={-45} 
                    textAnchor="end" 
                    height={80}
                    axisLine={{ stroke: '#d1d5db', strokeWidth: 2 }}
                  />
                  <YAxis 
                    unit="%" 
                    tick={{ fontSize: 13, fill: '#6b7280', fontWeight: 500 }}
                    axisLine={{ stroke: '#d1d5db', strokeWidth: 2 }}
                  />
                  <Tooltip 
                    formatter={(v: number) => [`${v}%`, 'Tax Rate']}
                    contentStyle={{ 
                      backgroundColor: '#ffffff',
                      border: '2px solid #e5e7eb',
                      borderRadius: '12px',
                      boxShadow: '0 10px 25px -5px rgba(0, 0, 0, 0.1)',
                      fontSize: '14px',
                      fontWeight: 600
                    }}
                  />
                  <Bar dataKey="rate" fill="#8B5CF6" radius={[4, 4, 0, 0]} />
                </BarChart>
              </ResponsiveContainer>
            </div>
          </div>

          {/* tips & disclaimer */}
          <div className="bg-gradient-to-r from-blue-50 via-indigo-50 to-purple-50 dark:from-blue-900/30 dark:via-indigo-900/30 dark:to-purple-900/30 p-10 rounded-3xl border-2 border-blue-200 dark:border-blue-700 shadow-xl">
            <h3 className="text-xl font-semibold mb-4 flex items-center gap-2 text-blue-900 dark:text-blue-100">
              <Lightbulb className="w-5 h-5 text-yellow-500" />
              Tax Saving Tips
            </h3>
            <ul className="space-y-4 text-base text-blue-800 dark:text-blue-200">
              {core.getTaxSavingTips(categoryId, calc.grossIncome).map((t, i) => (
                <li key={i} className="flex items-start gap-2">
                  <span className="w-3 h-3 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full mt-2 shrink-0 shadow-sm"></span>
                  <span className="font-medium">{t}</span>
                </li>
              ))}
            </ul>
          </div>

          <div className="bg-gradient-to-r from-amber-50 via-yellow-50 to-orange-50 dark:from-amber-900/30 dark:via-yellow-900/30 dark:to-orange-900/30 border-2 border-amber-200 dark:border-amber-700 rounded-3xl p-10 shadow-xl">
            <div className="flex items-start gap-2">
              <div className="bg-amber-100 dark:bg-amber-900/50 p-2 rounded-xl">
                <Info className="w-6 h-6 text-amber-600 dark:text-amber-400" />
              </div>
              <div>
                <p className="font-bold text-amber-800 dark:text-amber-200 mb-3 text-xl">Important Disclaimer</p>
                <p className="text-amber-700 dark:text-amber-300 font-medium text-base leading-relaxed">
                  These are estimates based on Finance Act 2025-26. Please consult a qualified tax advisor for precise calculations and filing requirements.
                </p>
              </div>
            </div>
          </div>
        </>
      )}
    </div>
  );
};